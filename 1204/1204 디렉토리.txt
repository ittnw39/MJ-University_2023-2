디렉토리

- 파일 시스템의 구조를 가지고 있는 파일이다.

디렉토리는 개념적으로 다른 파일의 위치를 보여주는 정보이다. 내 자식의 파일의 정보를 표시하는 파일이다.

윈도우의 파일 시스템은 트리구조로 되어있다.

트리구조에서 일반적으로 데이터를 가진 존재를 노드라고 한다. 노드는 2가지 존재가 있다.

논터미널과 터미널이 있다.

터미널은 끝이라는 뜻이고, 논터미널은 끝이 아니라는 뜻이다. 

트리에 제일 마지막에 달려있는 리프(잎사귀)를 터미널 노드라고 한다. = 리프 노드

복합, 혹은 프리미티브로 얘기하기도 한다. 용도에 따라 용어가 많다. 의미적, 구조적으로 용어가 달라진다.

중간에 있는 노드는 자식의 정보를 추가로 가지고 있어야 한다. 끝에 달린 노드는 자기의 정보만 가지고 있으면 된다.

그래서 트리를 만들 때는 리프 노드를 논터미널 노드에 add시킨다. 자식을 부모에게 add한다.

그래야 n:1의 관계를 만들 수 있다. 한쪽 방향에서 자식을 부모에게 add한다.

우리가 디렉토리 구조를 트리구조로 읽어옴. '.file'을 계속 읽어오면 됨. 그리고나서 jtree 안에 집어넣었다. 매핑시켰다.

디렉토리 구조 -> 프로그램의 JTree로 매핑시킴.

제이트리의 파일은 노드라는 제이트리의 구성요소로 만들었음. 자바 프로그램으로 만든것임.

디렉토리는 윈도우즈에서 쓰는 디렉토리 파일이고 이를 자바의 제이트리로 바꾼 것이다.

파일은 디렉토리일수도, 프리미티브 파일일 수도 있다.

리퀄전과 루핑은 똑같다.

리퀄전은 반복을 해야하는데, 부모가 자식에게 자신에게 붙으라고 하는 것을 한방향으로 반복하는 것을 말한다..

트리가 리퀄전에 아주 적합한 모델이다. 100프로 관계가 있다.

왜 리컬전이 맞느냐? 왜냐하면 갔다가 돌아오면서 자식을 붙이는데, 루핑을 돌리려면 가는 그 길을 어딘가에 다 저장하고 있어야 한다.

저장해놨다가 돌아갈 수 있어야 한다. 부모가 자식들에게 루핑을 돌리면서 얘기한다.

크리에이트 차일드 노드->를 하면 리턴이 '다 만들어놓진 노드'가 나오는 것이다. 그것을 부모에 add하는 것이다.

또 다른 자식이 있으면 그걸 또 붙인다.

즉 노드 안에 generate child node라는 것이 있어야한다. 그걸로 루핑을 돌리는 것이다. 

리퀄전을 쓰면 파일이 null이면(디렉토리가 아니면) 멈춘다. 